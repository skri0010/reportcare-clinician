"""
Official docs for authentication: https://docs.amplify.aws/cli/graphql-transformer/auth
Official docs for keys: https://docs.amplify.aws/cli/graphql-transformer/key#key

{ allow: groups, groupsField: "patientID", operations: [read] }
- Clinicians can read records containing their patients
- Refer to `reportcare-clinician/docs/access-control.md` for more information on @auth with ownerField and groupsField
"""
type PatientInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(fields: ["patientID"]) {
  id: ID!
  name: String!
  address: String!
  deviceNo: String!
  diagnosisInfo: String!
  NHYAclass: String!
  cardiologist: String!
  hospitalName: String!
  hospitalLocation: String!
  targetWeight: String!
  targetActivity: String!
  patientID: String!
}

type MedicationInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "medicationInfosByPatientID"
    fields: ["patientID"]
    queryField: "listMedicationInfosByPatientID"
  ) {
  id: ID!
  medname: String!
  dosage: String!
  patientID: String!
}

type ActivityInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "activityInfosByPatientID"
    fields: ["patientID"]
    queryField: "listActivityInfosByPatientID"
  ) {
  id: ID!
  Actname: String!
  Location: String!
  Frequency: Int!
  Days: [String!]!
  time: String!
  patientID: String!
}

type MedCompliant
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "medCompliantsByPatientID"
    fields: ["patientID"]
    queryField: "listMedCompliantsByPatientID"
  )
  @key(
    name: "medCompliantsByDate"
    fields: ["patientID", "Date"]
    queryField: "listMedCompliantsByDate"
  ) {
  id: ID!
  MedId: ID!
  MedicationInfo: MedicationInfo @connection(fields: ["MedId"])
  Verification: Boolean!
  Date: AWSDateTime!
  patientID: String!
}

type ReportSymptom
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "reportSymptomsByPatientID"
    fields: ["patientID"]
    queryField: "listReportSymptomsByPatientID"
  )
  @key(
    name: "reportSymptomsByDateTime"
    fields: ["patientID", "DateTime"]
    queryField: "listReportSymptomsByDateTime"
  ) {
  id: ID!
  ActId: ID!
  ActivityInfo: ActivityInfo @connection(fields: ["ActId"])
  Name: String!
  Severity: String!
  DateTime: AWSDateTime!
  patientID: String!
}

type ReportVitals
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "reportVitalsByPatientID"
    fields: ["patientID"]
    queryField: "listReportVitalsByPatientID"
  )
  @key(
    name: "reportVitalsByDateTime"
    fields: ["patientID", "DateTime"]
    queryField: "listReportVitalsByDateTime"
  ) {
  id: ID!
  Temperature: String
  Humidity: String
  Weight: String!
  BPSys: String!
  BPDi: String!
  NoSteps: String!
  OxySat: String!
  DateTime: AWSDateTime!
  patientID: String!
}

"""
== Authorization ==
1. Clinicians can create and read records
2. Owners can read and update own records
3. Patients can read records

Notes:
1. Contains basic information
2. Sensitive information should be stored in ClinicianProtectedInfo
3. One-to-one connection with ClinicianProtectedInfo
"""
type ClinicianInfo
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groups: ["Patients"], operations: [read] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [create, read]
      }
    ]
  )
  @key(fields: ["clinicianID"]) {
  id: ID!
  name: String!
  hospitalName: String!
  role: String!
  clinicianID: String!
  protectedInfo: ClinicianProtectedInfo @connection(fields: ["clinicianID"])
  owner: String!
}

"""
== Authorization ==
1. Clinicians can create records
2. Owners can read and update own records
3. Patients have NO CRUD authorization

Contains sensitive information such as agent state
"""
type ClinicianProtectedInfo
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [create]
      }
    ]
  )
  @key(fields: ["clinicianID"]) {
  id: ID!
  facts: String!
  APS: String!
  DTA: String!
  UXSA: String!
  NWA: String!
  ALA: String!
  MHA: String!
  clinicianID: String!
  owner: String!
}

"""
== Authorization ==
1. Clinicians can create records
2. Clinicians can read records containing their patients
3. Patients can read their OWN records
4. Owners can read their own records
5. NO ONE is allowed to update records

== Partition key and sort key ==
Primary index: clinicianID, patientID
Secondary index: patientID, clinicianID
"""
type ClinicianPatientMap
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      { allow: owner, ownerField: "patientID", operations: [read] }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [create]
      }
    ]
  )
  @key(fields: ["clinicianID", "patientID"])
  @key(
    name: "clinicianMappingsByPatientID"
    fields: ["patientID", "clinicianID"]
    queryField: "listClinicianMappingsByPatientID"
  ) {
  id: ID!
  clinicianID: String!
  patientID: String!
  clinicianInfo: ClinicianInfo! @connection(fields: ["clinicianID"])
  owner: String!
}

"""
Authorization
1. Everyone can create and read their own records
2. Clinicians can read and update records containing themselves
"""
type PatientAssignment
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read] }
      { allow: owner, ownerField: "clinicianID", operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(fields: ["patientID", "clinicianID"])
  @key(
    name: "pendingPatientAssignments"
    fields: ["clinicianID", "pending"]
    queryField: "listPendingPatientAssignments"
  ) {
  id: ID!
  patientID: String!
  clinicianID: String!
  pending: String
  resolution: String
  patientName: String!
}

"""
== Authorization ==
1. Patients can create records
2. Owners can read their own records
3. Clinicians can read and update records containing their patients
"""
type Alert
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read, update] }
      { allow: groups, groups: ["Patients"], operations: [create] }
    ]
  )
  @key(
    name: "patientAlertsByDateTime"
    fields: ["patientID", "dateTime"]
    queryField: "listPatientAlertsByDateTime"
  )
  @key(
    name: "pendingAlertsByDateTime"
    fields: ["pending", "dateTime"]
    queryField: "listPendingAlertsByDateTime"
  )
  @key(
    name: "pendingRiskAlerts"
    fields: ["pending", "colorCode"]
    queryField: "listPendingRiskAlerts"
  )
  @key(
    name: "completedRiskAlerts"
    fields: ["completed", "colorCode"]
    queryField: "listCompletedRiskAlerts"
  ) {
  id: ID!
  patientID: String!
  patientName: String!
  dateTime: AWSDateTime!
  summary: String!
  colorCode: String!
  vitalsReportID: ID!
  vitalsReport: ReportVitals @connection(fields: ["vitalsReportID"])
  symptomReportID: ID!
  symptomReport: ReportSymptom @connection(fields: ["symptomReportID"])
  pending: String
  completed: String
  owner: String!
}

"""
== Authorization ==
1. Clinicians can create records
2. Owners can read and update their own records
"""
type Todo
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [create]
      }
    ]
  )
  @key(
    name: "todosByClinicianID"
    fields: ["clinicianID"]
    queryField: "listTodosByClinicianID"
  )
  @key(
    name: "todosByLastModifiedDate"
    fields: ["clinicianID", "lastModified"]
    queryField: "listTodosByLastModifiedDate"
  )
  @key(
    name: "todosByAlertID"
    fields: ["clinicianID", "alertID"]
    queryField: "listTodosByAlertID"
  ) {
  id: ID!
  clinicianID: String!
  title: String!
  patientName: String!
  notes: String!
  lastModified: AWSDateTime!
  alertID: ID
  alert: Alert @connection(fields: ["alertID"])
  completed: Boolean!
  owner: String!
}
