"""
Official docs for authentication: https://docs.amplify.aws/cli/graphql-transformer/auth
Official docs for keys: https://docs.amplify.aws/cli/graphql-transformer/key#key

For groupFields details: Design History: Implementation of dynamic group authorization
#P5 - Models can be improved after implementation of Proposal 5 in https://github.com/aws-amplify/amplify-cli/issues/317
"""
type PatientInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read, update] }
    ]
  )
  @key(fields: ["patientID"]) {
  patientID: String!
  name: String!
  address: String!
  gender: String!
  birthDate: AWSDate!
  language: String!
  phoneNumber: String!
  email: String!
  emergencyContactName: String!
  emergencyContactNumber: String!
  NYHAClass: String
  cardiologist: String
  diagnosisInfo: String
  hospitalName: String
  hospitalLocation: String
  targetWeight: Float
  targetSteps: Int
  riskLevel: String
  deviceNo: String
  fluidIntakeGoalInMl: Int
  configured: Boolean!
  version: Int!
  updatedByUser: String!
}

type MedicationInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: owner, ownerField: "patientID", operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read, update] }
    ]
  )
  @key(
    name: "medicationInfosByPatientID"
    fields: ["patientID"]
    queryField: "listMedicationInfosByPatientID"
  ) {
  id: ID!
  patientID: String!
  name: String!
  dosage: Float!
  frequency: Int!
  records: AWSJSON!
  active: Boolean!
}

type ActivityInfo
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "activityInfosByPatientID"
    fields: ["patientID"]
    queryField: "listActivityInfosByPatientID"
  ) {
  id: ID!
  patientID: String!
  activityName: String!
  startTime: AWSDateTime!
  days: [String!]
  durationInMinutes: Int
  locations: [String!]
  symptoms: [String!]
}

type ReportSymptom
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "reportSymptomsByPatientID"
    fields: ["patientID"]
    queryField: "listReportSymptomsByPatientID"
  )
  @key(
    name: "reportSymptomsByDateTime"
    fields: ["patientID", "dateTime"]
    queryField: "listReportSymptomsByDateTime"
  ) {
  id: ID!
  patientID: String!
  activityInfoID: ID!
  activityInfo: ActivityInfo @connection(fields: ["activityInfoID"])
  symptomName: String!
  severity: Int!
  dateTime: AWSDateTime!
  summary: String!
  weather: String
  temperature: String
  humidity: String
}

type ReportVitals
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "reportVitalsByPatientID"
    fields: ["patientID"]
    queryField: "listReportVitalsByPatientID"
  )
  @key(
    name: "reportVitalsByDateTime"
    fields: ["patientID", "dateTime"]
    queryField: "listReportVitalsByDateTime"
  ) {
  id: ID!
  patientID: String!
  dateTime: AWSDateTime!
  weight: Float
  systolicBloodPressure: Float
  diastolicBloodPressure: Float
  oxygenSaturation: Float
  fluidIntakeInMl: Int
  weather: String
  temperature: Float
  humidity: Float
}

type Physical
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(
    name: "physicalsByPatientID"
    fields: ["patientID"]
    queryField: "listPhysicalsByPatientID"
  )
  @key(
    name: "physicalsByDateTime"
    fields: ["patientID", "dateTime"]
    queryField: "listPhysicalsByDateTime"
  ) {
  id: ID!
  patientID: String!
  steps: Int!
  stepsGoal: Int!
  averageWalkingSpeedInMetresPerSeconds: Float!
  distanceInMetres: Float!
  dateTime: AWSDateTime!
}

"""
#P5
== Authorization ==
1. Clinicians (clinicianID) can create, read and update their own records
2. Clinicians can read all records
3. Patients can read all records

Owners cannot be modified since they are part of @keys

== Notes ==
1. Contains basic information
2. Sensitive information should be stored in ClinicianProtectedInfo
"""
type ClinicianInfo
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "clinicianID"
        operations: [create, read, update]
      }
      { allow: groups, groups: ["Patients"], operations: [read] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [read]
      }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(fields: ["clinicianID"]) {
  clinicianID: String!
  name: String!
  hospitalName: String!
  role: String!
  contactNumber: String!
  protectedInfo: ClinicianProtectedInfo @connection(fields: ["clinicianID"])
  version: Int!
}

"""
#P5
== Authorization ==
1. Clinicians (clinicianID) can create, read and update their own records

Owners cannot be modified since they are part of @keys

== Notes ==
1. Contains sensitive information such as agent state
"""
type ClinicianProtectedInfo
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "clinicianID"
        operations: [create, read, update]
      }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(fields: ["clinicianID"]) {
  clinicianID: String!
  facts: String!
  APS: String!
  DTA: String!
  UXSA: String!
  NWA: String!
  ALA: String!
  MHA: String!
  CAM: String!
  version: Int!
}

"""
#P5
== Authorization ==
1. Clinicians (clinicianID) can read their own records
2. Patients (patientID) can read their own records
3. Clinicians can read other clinicians' records with similar patients (patientID)
NOTE: AWS Lambda should create the ClincicianPatientMap records

Owners cannot be modified since they are part of @keys
"""
type ClinicianPatientMap
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "clinicianID", operations: [read] }
      { allow: owner, ownerField: "patientID", operations: [read] }
      { allow: groups, groupsField: "patientID", operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(fields: ["clinicianID", "patientID"])
  @key(
    name: "clinicianMappingsByPatientID"
    fields: ["patientID", "clinicianID"]
    queryField: "listClinicianMappingsByPatientID"
  ) {
  clinicianID: String!
  patientID: String!
  clinicianInfo: ClinicianInfo! @connection(fields: ["clinicianID"])
}

"""
#P5
== Authorization ==
1. Patients (patientID) can create and read their own records
2. Clinicians (clinicianID) can read and update their own records
3. Clinicians can read all records

Owners cannot be modified since they are part of @keys

== Notes ==
1. pending and resolution are optional and used for GSI efficiency
"""
type PatientAssignment
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "patientID", operations: [create, read] }
      { allow: owner, ownerField: "clinicianID", operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(fields: ["patientID", "clinicianID"])
  @key(
    name: "pendingPatientAssignments"
    fields: ["clinicianID", "pending"]
    queryField: "listPendingPatientAssignments"
  ) {
  patientID: String!
  clinicianID: String!
  patientName: String!
  pending: String
  resolution: String
  reassignToClinicianID: String
  sourceClinicianID: String
}

"""
== Authorization ==
1. Patients can create records
2. Owners can read their own records
3. Clinicians can read and update records containing their patients
"""
type Alert
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read] }
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groupsField: "patientID", operations: [read, update] }
      { allow: groups, groups: ["Patients"], operations: [create] }
    ]
  )
  @key(
    name: "patientAlertsByDateTime"
    fields: ["patientID", "dateTime"]
    queryField: "listPatientAlertsByDateTime"
  )
  @key(
    name: "pendingAlertsByDateTime"
    fields: ["pending", "dateTime"]
    queryField: "listPendingAlertsByDateTime"
  )
  @key(
    name: "pendingRiskAlerts"
    fields: ["pending", "colorCode"]
    queryField: "listPendingRiskAlerts"
  )
  @key(
    name: "completedRiskAlerts"
    fields: ["completed", "colorCode"]
    queryField: "listCompletedRiskAlerts"
  ) {
  id: ID!
  patientID: String!
  patientName: String!
  dateTime: AWSDateTime!
  summary: String!
  colorCode: String!
  triageValue: String!
  vitalsReportID: ID!
  vitalsReport: ReportVitals @connection(fields: ["vitalsReportID"])
  symptomReportID: ID!
  symptomReport: ReportSymptom @connection(fields: ["symptomReportID"])
  pending: String
  completed: String
  version: Int!
  updatedByUser: String!
}

"""
== Authorization ==
1. Clinicians can create records
2. Owners can read and update their own records
"""
type Todo
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, update] }
      { allow: groups, groups: ["Admin"] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [create]
      }
    ]
  )
  @key(
    name: "pendingTodosByLastModifiedDate"
    fields: ["pending", "lastModified"]
    queryField: "listPendingTodosByLastModifiedDate"
  )
  @key(
    name: "completedTodosByLastModifiedDate"
    fields: ["completed", "lastModified"]
    queryField: "listCompletedTodosByLastModifiedDate"
  )
  @key(
    name: "todosByAlertID"
    fields: ["clinicianID", "alertID"]
    queryField: "listTodosByAlertID"
  ) {
  id: ID!
  clinicianID: String!
  title: String!
  patientName: String!
  notes: String!
  lastModified: AWSDateTime!
  alertID: ID
  alert: Alert @connection(fields: ["alertID"])
  pending: String
  completed: String
  version: Int!
}

type AlertNotification
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groups: ["Patients"], operations: [create, read] }
      {
        allow: groups
        groups: [
          "EPs"
          "Nurses"
          "HFSpecialists"
          "MedicalOfficers"
          "Pharmacists"
        ]
        operations: [read]
      }
    ]
  ) {
  id: ID!
  patientID: String!
  alertID: ID!
  owner: String!
}

"""
== Authorization ==
1. Clinicians (clinicianID) can read their own records
2. Clinicians can read other clinicians' records with similar patients (patientID)
"""
type ClinicianRecord
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: owner, operations: [create, read] }
      { allow: groups, groupsField: "patientID", operations: [read] }
    ]
  )
  @key(fields: ["patientID", "documentID"])
  @key(
    name: "uploadedClinicianRecordsByPatientID"
    fields: ["patientID", "uploadDateTime"]
    queryField: "listUploadedClinicianRecordsByPatientID"
  ) {
  patientID: String!
  documentID: String!
  type: String!
  title: String!
  path: String!
  uploaderClinicianID: String!
  uploadDateTime: AWSDateTime
}

"""
== Lambda Resolver Query ==
NOTE: Function type, name, arguments and return type must match in backend/function/*/lib/types

Query 1:queryS3ClinicianRecordsBridge
Input: {
  recordType: "IcdCrt" | "Medical"
  operation: "Upload" | "Download | "Delete" | "Acknowledge"
  patientId: string
  documentID: string (should be unique by patient)
  documentName: string
}
Query 2: handlePatientAssignmentResolution
Query 3: sharePatientAssignment
"""
type Query {
  queryS3ClinicianRecordsBridge(
    recordType: String
    operation: String
    patientID: String
    documentID: String
    documentTitle: String
  ): AWSJSON @function(name: "s3clinicianrecordsbridge-${env}")

  handlePatientAssignmentResolution(
    patientID: String
    resolution: String
    reassignToClinicianID: String
  ): AWSJSON @function(name: "patientassignmenthandler-${env}")

  sharePatientAssignment(
    patientID: String
    patientName: String
    shareToClinicianID: String
  ): AWSJSON @function(name: "patientassignmenthandler-${env}")
}
